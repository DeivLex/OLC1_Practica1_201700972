/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;


/**
 *
 * @author Davis
 */
public class home extends javax.swing.JFrame {
    static boolean Division = false;
    static boolean Sim = false;
    static String ConActual="";
    static int Imacro=0;
    static int Fmacro=0;
    private int estado = 0;
    private int posicion = 0;
    private String fuente = "";
    private char c;
    private String auxLex = "";
    private ArrayList<String> listaLexema = new ArrayList();
    private ArrayList<String> listaToken = new ArrayList();
    private ArrayList<String> Conjunto = new ArrayList();
    private ArrayList<String> DatCon = new ArrayList();
    
    /**
     * Creates new form home
     */
    public home() {
        initComponents();
        Consola.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Entrada = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Consola = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Entrada.setColumns(20);
        Entrada.setRows(5);
        jScrollPane1.setViewportView(Entrada);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Archivo de entrada");

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Consola.setColumns(20);
        Consola.setRows(5);
        jScrollPane2.setViewportView(Consola);

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Guardar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Guardar como");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Generar XML de salida");
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Acerca de");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
Entrada.setText(abrirArchivo());
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
guardarArchivo();
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
guardarComo();
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Clean
        Sim=false;
        Division=false;
        Imacro=0;
        Fmacro=0;
        estado = 0;
        posicion = 0;
        auxLex = "";
        ConActual="";
        listaLexema.clear();
        listaToken.clear();
        Conjunto.clear();
        DatCon.clear();
        fuente = Entrada.getText();
        fuente = fuente.trim();
        //inicio
        if(fuente.length() == 0){
        	Consola.setText("El cuadro de entrada no contiene\ncaracteres a"
                + " evaluar. ");
    	}
        else{
            iniciarProceso();
            imprimirLista();
            for (int i = 0; i < Conjunto.size(); i++) {
                System.out.println(Conjunto.get(i)+"-----"+DatCon.get(i));
            }
            System.out.println(Imacro+"~"+Fmacro);
            System.out.println("Es simbolo: "+Sim);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Consola;
    private javax.swing.JTextArea Entrada;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
File direccion;
private String abrirArchivo() {
    direccion=null;
  String aux="";   
  String texto="";
  try
  {
   /**llamamos el metodo que permite cargar la ventana*/
   JFileChooser file=new JFileChooser();
   file.showOpenDialog(this);
   /**abrimos el archivo seleccionado*/
   File abre=file.getSelectedFile();
 direccion=abre;
   /**recorremos el archivo, lo leemos para plasmarlo
   *en el area de texto*/
   if(abre!=null)
   {     
      FileReader archivos=new FileReader(abre);
      BufferedReader lee=new BufferedReader(archivos);
      while((aux=lee.readLine())!=null)
      {
         texto+= aux+ "\n";
      }
         lee.close();
    }    
   }
   catch(IOException ex)
   {
     JOptionPane.showMessageDialog(null,ex+"" +
           "\nNo se ha encontrado el archivo",
                 "ADVERTENCIA!!!",JOptionPane.WARNING_MESSAGE);
    }
  return texto;//El texto se almacena en el JTextArea
}
private void guardarComo() {
 try
 {
  String nombre="";
  JFileChooser file=new JFileChooser();
  file.showSaveDialog(this);
  File guarda =file.getSelectedFile();
 
  if(guarda !=null)
  {
   /*guardamos el archivo y le damos el formato directamente,
    * si queremos que se guarde en formato doc lo definimos como .doc*/
    FileWriter  save=new FileWriter(guarda+".er");
    save.write(Entrada.getText());
    save.close();
    JOptionPane.showMessageDialog(null,
         "El archivo se a guardado Exitosamente",
             "Información",JOptionPane.INFORMATION_MESSAGE);
    }
 }
  catch(IOException ex)
  {
   JOptionPane.showMessageDialog(null,
        "Su archivo no se ha guardado",
           "Advertencia",JOptionPane.WARNING_MESSAGE);
  }
 }
private void guardarArchivo() {
            FileWriter fw;
            try
            {
                  fw= new FileWriter(direccion);
            }
            catch(IOException io)
            {
    JOptionPane.showMessageDialog(null,
         "Error al abrir archivo",
             "Información",JOptionPane.INFORMATION_MESSAGE);
                  return;
            }
            //Escribimos
            try
            {
                  fw.write(Entrada.getText());
    JOptionPane.showMessageDialog(null,
         "Archivo guardado",
             "Información",JOptionPane.INFORMATION_MESSAGE);
            }
            catch(IOException io)
            {
    JOptionPane.showMessageDialog(null,
         "Error al escribir archivo",
             "Información",JOptionPane.INFORMATION_MESSAGE);
            }
            //cerramos el fichero
            try
            {
                  fw.close();
            }
            catch(IOException io)
            {
    JOptionPane.showMessageDialog(null,
         "Error al cerrar archivo",
             "Información",JOptionPane.INFORMATION_MESSAGE);
            } 
}
private void iniciarProceso(){
for (int i = 0; i < fuente.length(); i++) {
    c=fuente.charAt(i);
    //System.out.println(i+" "+c);
    switch(estado){

        case 1:{
            if(Character.isLetter(c)){
                auxLex += c;
                estado = 1;
            }else if(Character.isDigit(c)){
                auxLex += c;
                estado = 1;
            }else if(auxLex.equals("CONJ")){
            addList(auxLex,"Palabra Reservada");
            estado=0;
            i=i-1;
            }else{
            addList(auxLex,"Id");
            estado=0;
            i=i-1;
            }
            break;
        }
        case 2:{
            if(Character.isLetter(c)){
                auxLex += c;
                estado = 3;
            }
            break;
        }
        case 3:{
            if(Character.isLetter(c)){
                auxLex += c;
                estado = 3;
            }else if(Character.isDigit(c)){
                auxLex += c;
                estado = 3;
            }else{
            ConActual=auxLex;
            addList(auxLex,"Id conjunto");
            estado=0;
            i=i-1;
            }
            break;
        }
        case 4:{
            if(c=='>'){
            auxLex+=c;
            addList(auxLex,"Asignacion");
            estado=5;
            }else{
                auxLex+=c;
            addList(auxLex,"error");
            estado=0;
            }
            break;
        }
        case 5:{
            if(Character.isLetter(c)){
                auxLex += c;
                estado = 6;
            }else if(Character.isDigit(c)){
                auxLex += c;
                estado = 6;
            }else if(c==(char)34){
                if(Division==false){
                    auxLex += c;
                }
            estado=12;
            }else if(c=='%'){
            addList(auxLex,"ER");
            estado=0;
            i=i-1;
            }else if(c=='.'){
                auxLex += c;
            estado=5;
            }else if(c=='|'){
                auxLex += c;
            estado=5;
            }else if(c=='?'){
                auxLex += c;
            estado=5;
            }else if(c=='*'){
                auxLex += c;
            estado=5;
            }else if(c=='+'){
                auxLex += c;
            estado=5;
            }else if(c=='{'){
            auxLex += c;
            estado=14;
            }else if(c==';'){
            addList(auxLex,"ER");
            addList(";","punto y coma");
            estado=0;
            }else if(esEspacio(c)){
            estado=5;
            }else{
            auxLex += c;
            estado = 6;
            }
            break;
        }
        case 6:{
             if(c==','){
            Conjunto.add(ConActual);
            DatCon.add(auxLex);
            addList(auxLex,"simbolo conjunto");
            addList(",","coma");
            estado=5;
            }else if(c=='~'){
                 if (Character.isDigit(auxLex.charAt(0))||Character.isLetter(auxLex.charAt(0))) {
                     Sim=false;
                 }else{
                     Sim=true;
                 }
                Imacro=(int)auxLex.charAt(0);
                addList(auxLex,"macro conjunto");
                addList("~","virgulilla");
                estado = 7;
            }else if(esEspacio(c)){
            estado=6;
            }else{
            Conjunto.add(ConActual);
            DatCon.add(auxLex);
            addList(auxLex,"simbolo conjunto");
            i=i-1;
            estado=0;
            }
            break;
        }
        case 7:{
            if(esEspacio(c)){
            estado=7;
            }else{
            auxLex += c;
            Fmacro=(int)auxLex.charAt(0);
                for (int j = Imacro; j <= Fmacro; j++) {
                    if (Sim==true) {
                    char v=(char)j;
                        if (Character.isDigit(v)||Character.isLetter(v)) {
                        } else {
                            Conjunto.add(ConActual);
                            DatCon.add(Character.toString(v));   
                        }
                    }else{
                    char v=(char)j;
                    Conjunto.add(ConActual);
                    DatCon.add(Character.toString(v));
                    }
                }
            addList(auxLex,"macro conjunto");
            estado=0;}
            break;
        }
        case 8:{
            if(c=='/'){
            auxLex+=c;
            estado=8;
            }else if(c == '\n' || c== '\t'){
                addList(auxLex,"comentario");
                estado = 0;
            }else if(c!='Ñ'){
            auxLex+=c;
            estado=8;
            }
            break;
        }
        case 9:{
            if(c=='!'){
            auxLex+=c;
            estado=10;
            }else{
                auxLex+=c;
            addList(auxLex,"error");
            estado=0;
            }
            break;
        }
        case 10:{
            if(c == '!'){
                auxLex+=c;              
                estado = 11;
            }else if(c!='Ñ'){
            auxLex+=c;
            estado=10;
            }
            break;
        }
        case 11:{
            if(c=='>'){
            auxLex+=c;
            addList(auxLex,"comentario miltilinea");
            estado = 0;
            }else{
                auxLex+=c;
            addList(auxLex,"error");
            estado=0;
            }
            break;
        }
        case 12:{
            if(c==(char)34){
                if(Division==true){
                addList(auxLex,"Lexema a evaluar");
                estado = 0;
                }else{
                auxLex += c;
            estado=5;
                }
            }else{
            auxLex+=c;
            estado=12;
            }
            break;
        }
        case 13:{
            if(c=='%'){
            auxLex+=c;
            estado=13;
            }else if(c=='\n'||c=='\t'){
            estado=13;
            }else if(auxLex.equalsIgnoreCase("%%%%")){
            addList(auxLex,"Division entre partes");
            Division=true;
            estado = 0;
            i=i-1;
            }else{
            auxLex+=c;
            addList(auxLex,"error");
            estado=0;
            }
            break;
        }case 14:{
            if(c=='}'){
            auxLex+=c;
            estado=5;
            }else{
            auxLex+=c;
            estado=14;
            }
            break;
        }
        case 15:{
            break;
        }
        case 16:{
            break;
        }
        case 17:{
            break;
        }
        case 18:{
            break;
        }
        case 0:{
            System.out.println(auxLex);
            if(Character.isLetter(c)){
                auxLex += c;
                estado = 1;
            }
            else if(c==':'){
            auxLex+=c;
            addList(auxLex,"dos puntos");
            if(Division==true){
            estado=5;
            }else{estado=2;}

            }else if(c==';'){
            auxLex+=c;
            addList(auxLex,"punto y coma");
            estado=0;
            }else if(c=='-'){
            auxLex+=c;
            estado=4;
            }else if(c=='{'){
            auxLex+=c;
            addList(auxLex,"llave izq");
            estado=0;
            }else if(c=='/'){
            auxLex+=c;
            estado=8;
            }else if(c=='<'){
            auxLex+=c;
            estado=9;
            }else if(c=='%'){
            auxLex+=c;
            estado=13;
            }else if(esEspacio(c)){
            estado=0;
            }else if(c=='}'){
            auxLex+=c;
            addList(auxLex,"llave der");
            estado=0;
            }else{
            auxLex+=c;
            addList(auxLex,"error");
            estado=0;
            }
            break; 
        }
        
    }
}}
private boolean esEspacio(char c){
    return c == '\n' || c== '\t' || c == ' ';
}
private void imprimirLista(){
    String auxiliar = "Token    -------   Lexema\n";
    for(int i = 0; i < listaLexema.size(); i++){
        auxiliar += listaToken.get(i) + "  -------  " + listaLexema.get(i) + "\n";
    }
    Consola.setText(auxiliar);
}
private void addList(String lex, String token){
    listaLexema.add(lex);
    listaToken.add(token);
    auxLex = "";
}

}

